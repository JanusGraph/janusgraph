#!/usr/bin/env expect
# Copyright 2019 JanusGraph Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License
spawn bin/gremlin.sh
expect_after {
    timeout {
        # Default timeout handler
        exit 1
    }
}
expect gremlin>
send "100-10\r"
expect "==>90"
expect gremlin>
send "g = JanusGraphFactory.open(\"${graphConfig}\")\r"
expect -re "${graphToString}"
expect gremlin>

send "g.getBackend().clearStorage()\r"
expect gremlin>

send "g = JanusGraphFactory.open(\"${graphConfig}\")\r"
expect -re "${graphToString}"
expect gremlin>

send "GraphOfTheGodsFactory.load(g)\r"
expect ==>null
expect gremlin>
# Some of these queries rely on ES, so give it some time to reindex
sleep 10

send "saturn = g.traversal().V().has('name','saturn').next()\r"
expect -re {v\[(\d+)\]}
expect gremlin>

send "g.traversal().V(saturn).valueMap()\r"
# TODO Why do neither of these expectations work?  I can't spot a difference between what follows here and the actual output.
#expect "==>\[name:\[saturn\], age:\[10000\]\]"
#expect {==>[name:[saturn], age:[10000]]}
expect gremlin>

send "saturn.label()\r"
expect ==>janusgraph
expect gremlin>

send "g.traversal().V(saturn).in('father').in('father').values('name')\r"
expect ==>hercules
expect gremlin>

send "g.traversal().E().has('place', new P(WITHIN, Geoshape.circle(37.97, 23.72, 50)))\r"
expect gremlin>
if { 2  != [regexp -all {\d+-battled->\d+} $expect_out(buffer)] } { exit 1 }

send "g.traversal().E().has('place', new P(WITHIN, Geoshape.circle(37.97, 23.72, 50))).as('source').inV().as('god2').select('source').outV().as('god1').select('god1', 'god2').by('name')\r"
expect gremlin>
if { -1 == [string first "==>\[god1:hercules, god2:hydra\]"  $expect_out(buffer)] } { exit 1 }
if { -1 == [string first "==>\[god1:hercules, god2:nemean\]" $expect_out(buffer)] } { exit 1 }

send "hercules = g.traversal().V(saturn).repeat(__.in('father')).times(2).next()\r"
expect -re {==>v\[(\d+)\]}
expect gremlin>

send "g.traversal().V(hercules).out('father', 'mother')\r"
expect gremlin>
if { 2  != [regexp -all {v\[(\d+)\]} $expect_out(buffer)] } { exit 1 }

send "g.traversal().V(hercules).out('father', 'mother').values('name')\r"
expect gremlin>
if { -1 == [string first "==>alcmene" $expect_out(buffer)] } { exit 1 }
if { -1 == [string first "==>jupiter" $expect_out(buffer)] } { exit 1 }

send "g.traversal().V(hercules).out('father', 'mother').label()\r"
expect gremlin>
if { -1 == [string first "==>god"   $expect_out(buffer)] } { exit 1 }
if { -1 == [string first "==>human" $expect_out(buffer)] } { exit 1 }

send "hercules.label()\r"
expect ==>demigod
expect gremlin>

send "g.traversal().V(hercules).out('battled')\r"
expect gremlin>
if { 3  != [regexp -all {v\[(\d+)\]} $expect_out(buffer)] } { exit 1 }

send "g.traversal().V(hercules).out('battled').valueMap()\r"
expect gremlin>
if { -1 == [string first "==>\[name:\[hydra\]\]"   $expect_out(buffer)] } { exit 1 }
if { -1 == [string first "==>\[name:\[nemean\]\]"    $expect_out(buffer)] } { exit 1 }
if { -1 == [string first "==>\[name:\[cerberus\]\]" $expect_out(buffer)] } { exit 1 }

send "g.traversal().V(hercules).outE('battled').has('time', new P(Compare.gt, 1)).inV().values('name')\r"
expect gremlin>
if { -1 == [string first "==>cerberus" $expect_out(buffer)] } { exit 1 }
if { -1 == [string first "==>hydra"    $expect_out(buffer)] } { exit 1 }

# Runs toString on a pipeline.  String contents are unimportant here -- just looking for unchecked exception surprises.
send "g.traversal().V(hercules).outE('battled').has('time', new P(Compare.gt, 1)).inV().values('name').toString()\r"
expect gremlin>

send "pluto = g.traversal().V().has('name', 'pluto').next()\r"
expect -re {==>v\[(\d+)\]}
expect gremlin>
send "g.traversal().V(pluto).out('lives').in('lives').values('name')\r"
expect gremlin>
if { -1 == [string first "==>pluto"    $expect_out(buffer)] } { exit 1 }
if { -1 == [string first "==>cerberus" $expect_out(buffer)] } { exit 1 }
send "g.traversal().V(pluto).out('lives').in('lives').except(\[pluto\]).values('name')\r"
expect ==>cerberus
expect gremlin>
send "g.traversal().V(pluto).as('x').out('lives').in('lives').except('x').values('name')\r"
expect ==>cerberus
expect gremlin>

send "g.traversal().V(pluto).out('brother').out('lives').values('name')\r"
expect gremlin>
if { -1 == [string first "==>sky" $expect_out(buffer)] } { exit 1 }
if { -1 == [string first "==>sea" $expect_out(buffer)] } { exit 1 }
send "g.traversal().V(pluto).out('brother').as('god').out('lives').as('place').select()\r"
expect gremlin>
if { 2  != [regexp -all {==>\[god:v\[\d+\], place:v\[\d+\]\]} $expect_out(buffer)] } { exit 1 }
send "g.traversal().V(pluto).out('brother').as('god').out('lives').as('place').select().by('name')\r"
expect gremlin>
if { -1 == [string first "==>\[god:jupiter, place:sky\]" $expect_out(buffer)] } { exit 1 }
if { -1 == [string first "==>\[god:neptune, place:sea\]" $expect_out(buffer)] } { exit 1 }

send "g.traversal().V(pluto).outE('lives').values('reason')\r"
expect "==>no fear of death"
expect gremlin>
send "g.traversal().E().has('reason', new P(CONTAINS, 'loves'))\r"
expect gremlin>
if { 2  != [regexp -all {\d+-lives->\d+} $expect_out(buffer)] } { exit 1 }
send "g.traversal().E().has('reason', new P(CONTAINS, 'loves')).as('source').values('reason').as('reason').select('source').outV().values('name').as('god').select('source').inV().values('name').as('thing').select('god', 'reason', 'thing')\r"
expect gremlin>

if { -1 == [string first "==>\[god:neptune, reason:loves waves, thing:sea\]"         $expect_out(buffer)] } { exit 1 }
if { -1 == [string first "==>\[god:jupiter, reason:loves fresh breezes, thing:sky\]" $expect_out(buffer)] } { exit 1 }

send "g.close()\r"
expect ==>null
expect gremlin>
exit 0
