#!/bin/bash
# Copyright 2019 JanusGraph Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License

set -e
set -u

require_yes() {
    echo -n "Is this OK? [y/N] "
    read line
    if [ "$line" != y ]; then
        echo "Confirmation declined by user.  Exiting."
        exit 1
    fi
}

# MavenXpp3Reader/Writer or xmlstarlet would be more
# robust than this line-oriented xml hack, but this hack
# does not have to be a full-featured parser.  It just
# has to ask the user for confirmation before doing
# anything, so that the user can abort if it's about to
# do something idiotic.  The hack will cover the input
# and output formats in all foreseeable cases anyway,
# since the scope of this task is so limited, so the
# confirmations just serve as a failsafe.
pattern='janusgraph\.compatible.versions'
POM_FILE=pom.xml
compat=$(grep "$pattern" "$POM_FILE")

hitcount=$(echo "$compat" | wc -l)
if [ 1 -ne $hitcount ]; then
    echo "Expected one hit for $pattern in $POM_FILE, but found $hitcount.  Exiting."
    exit 1
fi

echo "Current value of janusgraph.compatible.versions:"
echo "  $compat"
echo -n "Append a compatible version? [Y/n] "
read line
if [ "$line" != "n" ]; then
    echo -n "Enter the version to append: "
    read ver
    echo "Read the following version: \"$ver\"."
    require_yes
    # Check whether the tag is self-closing
    if echo "$compat" | grep '<janusgraph\.compatible\.versions[ 	]*/>' >/dev/null; then
        compat=$(echo "$compat" | sed -r 's#^(.*janusgraph\.compatible\.versions).+$#\1>'"$ver"'</janusgraph.compatible.versions>#')
    else
        compat=$(echo "$compat" | sed -r 's#^(.+>)(.+)(<.+)$#\1\2,'"$ver"'\3#' )
    fi
    echo "New value of janusgraph.compatible.versions:"
    echo "  $compat"
    require_yes
    echo "Generating $POM_FILE.new with updated janusgraph.compatible.versions..."
    cat "$POM_FILE" | sed -r 's#^.*<janusgraph\.compatible\.versions.*$#'"$compat"'#' > "${POM_FILE}.new"
    echo "Displaying diff between new and old $POM_FILE versions:"
    diff -u "${POM_FILE}" "${POM_FILE}.new" || true
    echo "About to copy ${POM_FILE}.new over ${POM_FILE} and locally commit."
    require_yes
    cp "${POM_FILE}.new" "${POM_FILE}"
    echo "Saved new janusgraph.compatible.versions value to $POM_FILE"
    echo "Committing changes to ${POM_FILE}..."
    git add "${POM_FILE}" 
    git commit -m 'Updating janusgraph.compatible.versions prop' "${POM_FILE}"
fi

# This does not push anything.  It creates two local commits and a tag.
# You will be prompted for the release version and the next dev version.
mvn clean release:prepare

# The tag name generated by release:prepare does not match the general
# pattern established before we started using the release plugin.  This
# script deletes the tag and creates it with a pattern-conformant name.
janusgraph-dist/src/release/rewrite-tag.sh release.properties

# Add the release to the list used in forward-compatibility testing
# during subsequent releases.
janusgraph-dist/src/release/commit-compat-version.sh release.properties

# For the rest of this document, $RELEASE_VERSION is the version we're
# in the process of releasing, e.g. 0.4.1
RELEASE_VERSION=`sed -nr 's/^scm\.tag=//p' release.properties`
echo RELEASE_VERSION: $RELEASE_VERSION

git_cmd="git checkout refs/tags/$RELEASE_VERSION"
mvn_cmd="mvn clean javadoc:jar deploy -Pjanusgraph-release,s3doc -DskipTests=true"
echo "About to deploy artifacts to S3 and Sonatype Staging."
echo "Commands that will be run:"
echo "  $git_cmd"
echo "  $mvn_cmd"

require_yes

set -x

# Deploy artifacts to S3 and to Sonatype Staging.  Doesn't push to Github.
$git_cmd
$mvn_cmd
