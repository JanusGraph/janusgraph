#! /bin/sh
### BEGIN INIT INFO
# Provides:          janusgraph
# Required-Start:    $network $named $time
# Required-Stop:     $network $named $time
# Should-Start:      ntp cassandra elasticsearch
# Should-Stop:       ntp cassandra elasticsearch
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: distributed graph database
# Description:       JanusGraph is a highly scalable graph database
#                    optimized for storing and querying large graphs
#                    with billions of vertices and edges distributed
#                    across a multi-machine cluster. JanusGraph is a
#                    transactional database that can support
#                    thousands of concurrent users.
### END INIT INFO

# Author: Dan LaRocque <dalaro@hopcount.org>

NAME=janusgraph
PIDFILE=/var/run/janusgraph/$NAME.pid
PATHNAME=/usr/sbin/$NAME

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

privilegecheck() {
    [ 0 -eq `id -u` ] || { echo "Must be run as root." >&2; exit 4; }
}

printusage() {
    echo "Usage: $0 {start|stop|restart|force-reload|status}" >&2
}

start() {
    local errmsg stat
    privilegecheck
    log_daemon_msg "Starting JanusGraph graph database" "main"
    su janusgraph -c "$PATHNAME -p $PIDFILE >/var/log/janusgraph/console.log"
    log_end_msg $?
}

stop() {
    local errmsg stat
    privilegecheck
    log_daemon_msg "Stopping JanusGraph graph database" "main"
    errmsg="`killproc -p $PIDFILE $PATHNAME 2>&1`"
    stat=$?
    log_end_msg $stat
    [ $stat -ne 0 ] && echo "$errmsg" >&2
    return $stat
}

status() {
    status_of_proc -p "$PIDFILE" "$PATHNAME" $NAME
}

restart() {
    stop # Try to start even if stop fails
    start
}

[ 1 -ne "$#" ] && { printusage; exit 2; }

case "$1" in
    start|stop|restart|status)
        $1
        exit $?
	;;
    force-reload)
        restart
        exit $?
	;;
    *)
        printusage
	exit 3
	;;
esac
