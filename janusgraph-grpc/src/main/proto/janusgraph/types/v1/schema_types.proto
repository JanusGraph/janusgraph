// Copyright 2021 JanusGraph Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package janusgraph.types.v1;

import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_package = "org.janusgraph.graphdb.grpc.types";

enum PropertyDataType {
    STRING = 0;
    CHARACTER = 1;
    BOOLEAN = 2;
    INT8 = 3;
    INT16 = 4;
    INT32 = 5;
    INT64 = 6;
    FLOAT32 = 7;
    FLOAT64 = 8;
    DATE = 9;
    JAVA_OBJECT = 10;
    GEO_SHAPE = 11;
    UUID = 12;
}

enum VertexPropertyCardinality {
    SINGLE = 0;
    LIST = 1;
    SET = 2;
}

enum PropertyConstraints {
    // Property can be used on all vertices and properties (can only be used with locality: global)
    OPEN = 0;
    // Property can be used on all defined vertices or properties
    DEFINED = 1;
    // Property is required on all defined vertices or properties
    REQUIRED = 2;
}

enum PropertyLocality {
    // Property is defined globally for all vertices and all edges/meta properties (if cardinality is single)
    GLOBAL = 0;
    // Property is defined a side of a vertex or edge.
    LOCAL = 1;
}

// current possibilities
// * schema constraints: property is globally defined but bind to vertex or edge - PropertyConstraints: DEFINED, PropertyLocality: GLOBAL
// * no schema constraints: property is globally defined but isn't bound to vertex or edge - PropertyConstraints: OPEN, PropertyLocality: GLOBAL
// * only properties with the cardinality single can be used for edges PropertyConstraints: DEFINED/OPEN/REQUIRED, PropertyLocality: GLOBAL
// future possibilities
// * per vertex/edge property - PropertyConstraints: DEFINED/REQUIRED, PropertyLocality: LOCAL
// * enforce schema constraints but special properties that can be bound to any vertex/edge allow properties with constraints to be OPEN or DEFINED in the same schema

message VertexProperty {
    google.protobuf.Int64Value id = 1;
    string name = 2;
    PropertyDataType data_type = 3;
    PropertyConstraints constraints = 4;
    PropertyLocality locality = 5;
    reserved 6 to 9;
    VertexPropertyCardinality cardinality = 10;
}

message EdgeProperty {
    google.protobuf.Int64Value id = 1;
    string name = 2;
    PropertyDataType data_type = 3;
    PropertyConstraints constraints = 4;
    PropertyLocality locality = 5;
    reserved 6 to 9;
}

message VertexLabel {
    // The Internal id.
    google.protobuf.Int64Value id = 1;
    // The VertexLabel Name.
    string name = 2;
    // Marking as readOnly, default not readOnly.
    bool read_only = 3;
    // Marking as partitioned, default not partitioned.
    bool partitioned = 4;
    repeated VertexProperty properties = 5;
}

message EdgeLabel {
    // The Internal id.
    google.protobuf.Int64Value id = 1;
    // The EdgeLabel Name.
    string name = 2;
    enum Direction {
        // Edge can be queried from both vertices.
        BOTH = 0;
        // Edge can be only queried from the outgoing vertex.
        // Direction OUT should be only used by experts, see https://docs.janusgraph.org/schema/advschema/#unidirected-edges.
        OUT = 1;
    }
    // Defines queryable direction.
    Direction direction = 3;
    enum Multiplicity {
        // The given edge label specifies a multi-graph, meaning that the multiplicity is not constrained and that
        // there may be multiple edges of this label between any given pair of vertices.
        MULTI = 0;
        // The given edge label specifies a simple graph, meaning that the multiplicity is not constrained but that there
        // can only be at most a single edge of this label between a given pair of vertices.
        SIMPLE = 1;
        // There can only be a single in-edge of this label for a given vertex but multiple out-edges (i.e. in-unique).
        ONE2MANY = 2;
        // There can only be a single out-edge of this label for a given vertex but multiple in-edges (i.e. out-unique).
        MANY2ONE = 3;
        // There can be only a single in and out-edge of this label for a given vertex (i.e. unique in both directions).
        ONE2ONE = 4;
    }
    // Defines Multiplicity of a edge.
    Multiplicity multiplicity = 4;
    repeated EdgeProperty properties = 5;
}