# Copyright 2020 JanusGraph Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI Release

on:
  pull_request:
    paths-ignore:
    - 'docs/**'
    - '.github/workflows/ci-docs.yml'
    - '.github/ISSUE_TEMPLATE/**'
    - 'requirements.txt'
    - 'mkdocs.yml'
    - 'docs.Dockerfile'
    - '*.md'
  push:
    paths-ignore:
    - 'docs/**'
    - '.github/workflows/ci-docs.yml'
    - '.github/ISSUE_TEMPLATE/**'
    - 'requirements.txt'
    - 'mkdocs.yml'
    - 'docs.Dockerfile'
    - '*.md'
    branches-ignore:
      - 'dependabot/**'
  schedule:
    - cron:  '0 0 * * 3'

env:
  ES_JAVA_OPTS: "-Xms256m -Xmx512m"
  BUILD_MAVEN_OPTS: "-DskipTests=true --batch-mode --also-make"
  VERIFY_MAVEN_OPTS: "-Pcoverage"

jobs:
  build-all:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - uses: actions/setup-java@v3
        with:
          java-version: "8.0.382+5"
          distribution: zulu
      - run: mvn clean install --projects janusgraph-all -Pjanusgraph-cache -Dmaven.javadoc.skip=true ${{ env.BUILD_MAVEN_OPTS }}
      - run: mvn verify --projects janusgraph-all -Pjanusgraph-cache ${{ env.VERIFY_MAVEN_OPTS }}

  dist-tests:
    runs-on: ubuntu-22.04
    needs: build-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - args: ""
            java: 8
            tag_suffix: ""
          - args: "-Pjava-11"
            java: 11
            tag_suffix: "-java-11"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - uses: actions/setup-java@v3
        if: "matrix.java == 8"
        with:
          java-version: "8.0.382+5"
          distribution: zulu
      - uses: actions/setup-java@v3
        if: "matrix.java == 11"
        with:
          java-version: "11.0.20+1"
          distribution: zulu
      - run: sudo apt-get update && sudo apt-get install -y expect
      - run: mvn clean install -Pjanusgraph-release ${{ env.BUILD_MAVEN_OPTS }} -Dgpg.skip=true ${{ matrix.args }}
      - run: mvn verify -pl janusgraph-dist -Pjanusgraph-release -Dgpg.skip=true ${{ matrix.args }}
      - uses: actions/upload-artifact@v3
        with:
          name: distribution-builds
          path: janusgraph-dist/target/janusgraph-*.zip
      - name: Set JanusGraph version environment variable
        run: |
          export JG_VER="$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)-$(git rev-parse --short HEAD)"
          echo "JG_VER=${JG_VER}" >> $GITHUB_ENV
      - name: Run Trivy vulnerability scanner
        if: github.repository == 'janusgraph/janusgraph'
        uses: aquasecurity/trivy-action@0.15.0
        with:
          image-ref: 'ghcr.io/janusgraph/janusgraph:${{ env.JG_VER }}${{ matrix.tag_suffix }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        if: github.repository == 'janusgraph/janusgraph'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  tp-tests:
    runs-on: ubuntu-22.04
    if: "github.event_name == 'push' && contains(github.event.head_commit.message, '[tp-tests]') || github.event_name == 'pull_request' && contains(github.event.pull_request.title, '[tp-tests]') || github.event_name == 'schedule'"
    needs: build-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - module: inmemory
            args: "-Dtest.skip.tp=false -DskipTests=true"
            java: 8
          - module: berkeleyje
            args: "-Dtest.skip.tp=false -DskipTests=true"
            java: 8
          - module: cql
            args: "-Pcassandra3-byteordered -Dtest.skip.tp=false -DskipTests=true"
            java: 8
          - module: cql
            args: "-Pcassandra3-murmur -Dtest.skip.tp=false -DskipTests=true"
            java: 8
          - module: hbase
            args: "-Dtest.skip.tp=false -DskipTests=true"
            java: 8
          - module: inmemory
            install-args: "-Pjava-11"
            args: "-Dtest.skip.tp=false -DskipTests=true"
            java: 11
          - module: berkeleyje
            install-args: "-Pjava-11"
            args: "-Dtest.skip.tp=false -DskipTests=true"
            java: 11
          - module: cql
            install-args: "-Pjava-11"
            args: "-Pcassandra3-byteordered -Dtest.skip.tp=false -DskipTests=true"
            java: 11
          - module: cql
            install-args: "-Pjava-11"
            args: "-Pcassandra3-murmur -Dtest.skip.tp=false -DskipTests=true"
            java: 11
          - module: cql
            install-args: "-Pjava-11"
            args: "-Pcassandra4-byteordered -Dtest.skip.tp=false -DskipTests=true"
            java: 11
          - module: cql
            install-args: "-Pjava-11"
            args: "-Pcassandra4-murmur -Dtest.skip.tp=false -DskipTests=true"
            java: 11
          - module: hbase
            install-args: "-Pjava-11"
            args: "-Dtest.skip.tp=false -DskipTests=true"
            java: 11
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - uses: actions/setup-java@v3
        if: "matrix.java == 8"
        with:
          java-version: "8.0.382+5"
          distribution: zulu
      - uses: actions/setup-java@v3
        if: "matrix.java == 11"
        with:
          java-version: "11.0.20+1"
          distribution: zulu
      - run: mvn clean install --projects janusgraph-${{ matrix.module }} ${{ env.BUILD_MAVEN_OPTS }} ${{ matrix.install-args }}
      - run: mvn verify --projects janusgraph-${{ matrix.module }} ${{ matrix.install-args }} ${{ matrix.args }}
