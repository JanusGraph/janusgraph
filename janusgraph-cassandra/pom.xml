<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.janusgraph</groupId>
        <artifactId>janusgraph</artifactId>
        <version>0.5.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>janusgraph-cassandra</artifactId>
    <name>JanusGraph-Cassandra: Distributed Graph Database</name>
    <url>https://janusgraph.org</url>
    <properties>
        <astyanax.version>3.10.2</astyanax.version>
        <jamm.group>com.github.jbellis</jamm.group>
        <dependency.plugin.version>2.8</dependency.plugin.version>
        <test.javaagent.opts>-javaagent:${com.github.jbellis:jamm:jar}</test.javaagent.opts>
        <test.extra.jvm.opts>${test.javaagent.opts}</test.extra.jvm.opts>
        <default.test.jvm.opts>-Xms256m -Xmx1280m -ea -XX:+HeapDumpOnOutOfMemoryError ${test.extra.jvm.opts}</default.test.jvm.opts>
        <mem.jvm.opts>-Xms256m -Xmx768m -ea -XX:+HeapDumpOnOutOfMemoryError ${test.extra.jvm.opts}</mem.jvm.opts>
        <top.level.basedir>${basedir}/..</top.level.basedir>
        <test.jvm.opts>${default.test.jvm.opts}</test.jvm.opts>
        <test.byteordered>byteordered</test.byteordered>
        <test.murmur>murmur</test.murmur>
        <test.docker.version.cassandra2>2.2.14</test.docker.version.cassandra2>
        <test.docker.version.cassandra3>3.11.4</test.docker.version.cassandra3>
    </properties>
    <!-- Libraries -->
    
    <dependencies>
        <dependency>
            <groupId>org.janusgraph</groupId>
            <artifactId>janusgraph-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.janusgraph</groupId>
            <artifactId>janusgraph-backend-testutils</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-jvm</artifactId>
        </dependency>
        <dependency>
            <groupId>com.carrotsearch</groupId>
            <artifactId>junit-benchmarks</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Logging backends.
             Cassandra 2.1+ moved to Logback.  JanusGraph is logging-backend-agnostic,
             but still uses Log4j in testing.  The slf4j binding for logback is,
             inconveniently, packed into the logback-classic artifact.  This means
             the binding can't easily be removed from the classpath without losing
             logback-classic or inserting some hack to mess with the jar contents.
             We can't lose logback-classic because StorageProxy contains hardcoded
             references to some of its classes (it contains some methods to change
             logback loglevels at runtime).  Hence, to stick with Log4j, the
             least-worst approach is to enforce a classpath ordering constraint: as
             long as the slf4j-log4j12 binding appears on the classpath before
             logback-classic, log4j will be used instead of logback.  I don't have
             any special love for log4j, but JanusGraph should use a single logging
             backend throughout all its tests.   I don't want to maintain a mixture
             of logback.xml and log4j.properties files scattered randomly through
             the janusgraph-* submodules.  Maven populates the classpath elements for
             tests in pom appearance order.  That's why these dependencies are 
             explicitly declared below: to make slf4j-log4j12 preced logback-classic
             on the test classpath. -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <!-- End logging backends. -->
        <dependency>
            <groupId>com.carrotsearch.randomizedtesting</groupId>
            <artifactId>randomizedtesting-runner</artifactId>
            <scope>test</scope>
        </dependency>
        <!--
            JNA is not required to run Cassandra, but it improves
            efficiency of certain of Cassandra's filesystem and memory
            operations.  DataStax describes JNA as "required for
            production installations":

            https://www.datastax.com/docs/1.2/install/install_jre
        -->
        <dependency>
            <groupId>net.java.dev.jna</groupId>
            <artifactId>jna</artifactId>
            <version>${jna.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.apache.cassandra</groupId>
            <artifactId>cassandra-all</artifactId>
            <!-- The version is controlled in <dependencyManagement> in the parent pom -->
            <exclusions>
                <!-- Use more recent version of jbcrypt from gremlin-groovy -->
                <exclusion>
                    <groupId>org.mindrot</groupId>
                    <artifactId>jbcrypt</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>net.java.dev.jna</groupId>
                    <artifactId>jna</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>jcl-over-slf4j</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>io.dropwizard.metrics</groupId>
                    <artifactId>metrics-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>io.dropwizard.metrics</groupId>
                    <artifactId>metrics-jvm</artifactId>
                </exclusion>
                <!-- We already use slf4j-log4j12, having both on the class path leads to cyclic dependency:  https://www.slf4j.org/codes.html#log4jDelegationLoop -->
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>log4j-over-slf4j</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>commons-pool</groupId>
            <artifactId>commons-pool</artifactId>
            <version>1.6</version>
        </dependency>
        <dependency>
            <groupId>com.netflix.astyanax</groupId>
            <artifactId>astyanax-core</artifactId>
            <version>${astyanax.version}</version>
        </dependency>
        <dependency>
            <groupId>com.netflix.astyanax</groupId>
            <artifactId>astyanax-thrift</artifactId>
            <version>${astyanax.version}</version>
        </dependency>
        <dependency>
            <groupId>com.netflix.astyanax</groupId>
            <artifactId>astyanax-cassandra</artifactId>
            <version>${astyanax.version}</version>
        </dependency>
        <dependency>
             <groupId>com.netflix.astyanax</groupId>
             <artifactId>astyanax-recipes</artifactId>
             <version>${astyanax.version}</version>
        </dependency>
        <dependency>
            <groupId>org.xerial.snappy</groupId>
            <artifactId>snappy-java</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
        </dependency>
        <dependency>
            <groupId>net.jpountz.lz4</groupId>
            <artifactId>lz4</artifactId>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>cassandra</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>        
        <plugins>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>filter-cassandra-bop-config</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/cassandra/conf/localhost-bop</outputDirectory>
                            <filters>
                                <filter>${basedir}/config/cassandra-filters/localhost-bop.properties</filter>
                            </filters>
                            <resources>
                                <resource>
                                    <directory>${basedir}/config/cassandra</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>filter-cassandra-murmur-config</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/cassandra/conf/localhost-murmur</outputDirectory>
                            <filters>
                                <filter>${basedir}/config/cassandra-filters/localhost-murmur.properties</filter>
                            </filters>
                            <resources>
                                <resource>
                                    <directory>${basedir}/config/cassandra</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>set-dependency-properties</id>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>properties</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <excludedGroups>${test.cassandra.excludes}</excludedGroups>
                    <groups />
                    <argLine>${test.jvm.opts}</argLine>
                    <forkCount>1</forkCount>
                    <reuseForks>false</reuseForks>
                    <parallel>none</parallel>
                    <perCoreThreadCount>false</perCoreThreadCount>
                    <threadCount>1</threadCount>
                    <systemPropertyVariables>
                        <log4j.configuration>file:${project.build.testOutputDirectory}/log4j.properties</log4j.configuration>
                        <cassandra.docker.image>${cassandra.docker.image}</cassandra.docker.image>
                        <cassandra.docker.version>${cassandra.docker.version}</cassandra.docker.version>
                        <cassandra.docker.partitioner>${cassandra.docker.partitioner}</cassandra.docker.partitioner>
                        <cassandra.docker.useSSL>${cassandra.docker.useSSL}</cassandra.docker.useSSL>
                        <cassandra.docker.useDefaultConfigFromImage>${cassandra.docker.useDefaultConfigFromImage}</cassandra.docker.useDefaultConfigFromImage>
                    </systemPropertyVariables>
                </configuration>
                <executions>
                    <execution>
                        <id>default-test</id>
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <id>cassandra-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                    </execution>
                    <execution>
                        <id>${test.murmur}-serial-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration>
                            <excludedGroups />
                            <groups>SERIAL_TESTS</groups>
                            <parallel>none</parallel>
                            <perCoreThreadCount>false</perCoreThreadCount>
                            <threadCount>1</threadCount>
                            <runOrder>alphabetical</runOrder>
                            <skip>${test.skip.murmur-serial}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <!-- Provide Java Memory Meter for Cassandra. Cassandra logs warnings if JAMM 
                      is not available. Also, production Cassandra deployments will probably use JAMM, 
                      so we might as well include it in our test configuration. -->
                    <execution>
                        <id>copy</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${jamm.group}</groupId>
                                    <artifactId>jamm</artifactId>
                                    <version>${jamm.version}</version>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>pack-test-jar</id>
                        <!-- prepare-package instead of package forces it to get signed -->
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
	        <id>coverage</id>
	        <activation>
	            <activeByDefault>false</activeByDefault>
	        </activation>
	        <properties>
	            <test.extra.jvm.opts>${jacoco.opts} ${test.javaagent.opts}</test.extra.jvm.opts>
	        </properties>
        </profile>

        <profile>
            <id>cassandra2-byteordered</id>
	        <activation>
	            <activeByDefault>false</activeByDefault>
	        </activation>
            <properties>
                <test.jvm.opts>${default.test.jvm.opts} -Dtest.cassandra.confdir=${project.build.directory}/cassandra/conf/localhost-bop -Dtest.cassandra.datadir=${project.build.directory}/cassandra/data/localhost-bop</test.jvm.opts>
                <cassandra.docker.version>${test.docker.version.cassandra2}</cassandra.docker.version>
                <cassandra.docker.partitioner>${test.byteordered}</cassandra.docker.partitioner>
                <test.skip.murmur-serial>true</test.skip.murmur-serial>
                <test.cassandra.excludes>${test.excluded.groups},SERIAL_TESTS</test.cassandra.excludes>
            </properties>
        </profile>
        <profile>
            <id>cassandra2-murmur</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <test.jvm.opts>${default.test.jvm.opts} -Dtest.cassandra.confdir=${project.build.directory}/cassandra/conf/localhost-murmur -Dtest.cassandra.datadir=${project.build.directory}/cassandra/data/localhost-murmur</test.jvm.opts>
                <cassandra.docker.version>${test.docker.version.cassandra2}</cassandra.docker.version>
                <cassandra.docker.partitioner>${test.murmur}</cassandra.docker.partitioner>
                <test.skip.murmur-serial>false</test.skip.murmur-serial>
                <test.cassandra.excludes>${test.excluded.groups},SERIAL_TESTS</test.cassandra.excludes>
            </properties>
        </profile>
        <profile>
            <id>cassandra2-murmur-ssl</id>
	        <activation>
	            <activeByDefault>false</activeByDefault>
	        </activation>
            <properties>
                <cassandra.docker.version>${test.docker.version.cassandra2}</cassandra.docker.version>
                <cassandra.docker.partitioner>${test.murmur}</cassandra.docker.partitioner>
                <cassandra.docker.useSSL>true</cassandra.docker.useSSL>
                <test.skip.murmur-serial>false</test.skip.murmur-serial>
                <test.cassandra.excludes>${test.excluded.groups},SERIAL_TESTS</test.cassandra.excludes>
            </properties>
        </profile>

        <profile>
            <id>cassandra3-byteordered</id>
	        <activation>
	            <activeByDefault>false</activeByDefault>
	        </activation>
            <properties>
                <test.jvm.opts>${default.test.jvm.opts} -Dtest.cassandra.confdir=${project.build.directory}/cassandra/conf/localhost-bop -Dtest.cassandra.datadir=${project.build.directory}/cassandra/data/localhost-bop</test.jvm.opts>
                <cassandra.docker.version>${test.docker.version.cassandra3}</cassandra.docker.version>
                <cassandra.docker.partitioner>${test.byteordered}</cassandra.docker.partitioner>
                <test.skip.murmur-serial>true</test.skip.murmur-serial>
                <test.cassandra.excludes>${test.excluded.groups},SERIAL_TESTS</test.cassandra.excludes>
            </properties>
        </profile>
        <profile>
            <id>cassandra3-murmur</id>
	        <activation>
	            <activeByDefault>false</activeByDefault>
	        </activation>
            <properties>
                <test.jvm.opts>${default.test.jvm.opts} -Dtest.cassandra.confdir=${project.build.directory}/cassandra/conf/localhost-murmur -Dtest.cassandra.datadir=${project.build.directory}/cassandra/data/localhost-murmur</test.jvm.opts>
                <cassandra.docker.version>${test.docker.version.cassandra3}</cassandra.docker.version>
                <cassandra.docker.partitioner>${test.murmur}</cassandra.docker.partitioner>
                <test.skip.murmur-serial>false</test.skip.murmur-serial>
                <test.cassandra.excludes>${test.excluded.groups},SERIAL_TESTS</test.cassandra.excludes>
            </properties>
        </profile>
        <profile>
            <id>cassandra3-murmur-ssl</id>
	        <activation>
	            <activeByDefault>false</activeByDefault>
	        </activation>
            <properties>
                <cassandra.docker.version>${test.docker.version.cassandra3}</cassandra.docker.version>
                <cassandra.docker.partitioner>${test.murmur}</cassandra.docker.partitioner>
                <cassandra.docker.useSSL>true</cassandra.docker.useSSL>
                <test.skip.murmur-serial>false</test.skip.murmur-serial>
                <test.cassandra.excludes>${test.excluded.groups},SERIAL_TESTS</test.cassandra.excludes>
            </properties>
        </profile>

        <profile>
            <id>scylladb</id>
            <properties>
                <cassandra.docker.version>3.0.9</cassandra.docker.version>
                <cassandra.docker.image>scylladb/scylla</cassandra.docker.image>
                <cassandra.docker.useDefaultConfigFromImage>true</cassandra.docker.useDefaultConfigFromImage>
                <test.skip.byteordered>true</test.skip.byteordered>
                <test.skip.murmur>true</test.skip.murmur>
                <test.skip.murmur-serial>true</test.skip.murmur-serial>
                <test.skip.murmur-ssl>true</test.skip.murmur-ssl>
            </properties>
        </profile>
    </profiles>
</project>

